http://blog.csdn.net/qq_37759895/article/details/79030411

DAO设计模式
	显示层 ———— 控制层 ———— 业务层 ———— 数据层 ————DataBase（数据库）
	（           前台	      ）	 	（	后台业务层     ）
	业务层是整个程序提供的操作功能，数据层是数据库的原子操作。
	业务层就是一个操作。而一个业务层的操作要想完成是由多个数据层的的操作共同完成的。
	整个过程中，发现数据层完成的只是一个个原子性的数据库开发。
	而在实际开发过程中，每一个操作的业务需要牵扯多个原子性的操作，也就是说所有原子性的操作最终实在业务层中完成。
	结论：用户所提出的所有的需求都应该划分在业务层，因为他指的是功能，而开发人员必须根据业务层进行数据层的设计。

一、对于数据层的开发：5步：（1）数据库的连接类	（2）VO类	（3）DAO接口	（4）DAO实现类	（5）DAO工厂类	

	1、数据连接的工具类：DatabaseConnection类，		连接数据库并获取连接对象。
		所有的数据库连接操作都是固定的步骤，可以单独定义一个DatabaseConnection类，这个类主要负责数据库连接对象的取得和关闭，
		保存在pers.zhangdi.dbc包里。
		整个操作过程之中，DatabaseConnection只是无条件的提供有数据库连接，而至于说有多少个连接对象，他都不关心。
	
	2、开发Values Object（VO类）：	Emp		包含属性和表中字段完全对应的类。
		不同的层次之间一定要进行数据的传递，但是既然操作的是指定的数据表，所以数据的结构必须要与表的结构一一对应，那么自然可以想到简单Java类。
		对应数据库中的表的结构，包含属性和表中字段完全对应的类。
			扩展知识（针对简单java类）：
			（1）考虑到日后程序有可能出现的分布式应用问题，所以简单java类必须实现java.io.Serialiable接口
			（2）简单java类的名称必须与表名一致。
			（3）类中的属性最好使用基本数据类型的包装类：基本数据类型的数值型的默认值为0, 而如果是包装类默认值为null。
			（4）类中可以定义多个构造方法，但是必须保留一个无参构造方法。
			（5）类中的属性必须用private封装，封装后的属性必须提供setter、getter方法。

	3、开发数据层（DAO接口）：IEmpDAO				提供了用户所有的操作方法（就如老师给学生提供一些学习方法）。
		数据层最终是交给业务层进行调用，所以业务层必须知道数据层的执行标准，即：业务层需要明确 的知道数据层的操作方法，但是不需要知道他的具体实现。
					|	数据层标准		|						|	   JDBC		|
		业务层  ————》	|				|	《———— 数据层	————》	|				|	《————  数据库
					|				|						|				|
		数据层是进行数据操作的，保存在 dao包下。
		既然不同的数据表的操作可能使用不同的数据层开发，那针对数据表进行命名,命名规范：
			（1）emp表：定义为IEmpDAO
			（2）对于数据层的开发严格来讲只有两类功能
				|-数据更新：doXxx()命名，例如：doCreat() ; doUpdate() ; doRemove() ;
				|-数据查询：分为两种
					|-查询表中的数据：findXxx(),例如：findById() ; findByName() ; findAll() ;
					|-统计表中的数据：getXxx(), 例如：getAllCount() ;

	4、数据层实现类（DAO实现类）：EmpDAOimpl			实现DAO中所有的方法（就如老师给提供的方法看你如何去完成）。
		数据层需要被业务层调用，数据层需要进行数据库的执行（PreparedStatement），由于在开发中一个业务层操作需要执行多个数据层的调用，
		数据库的打开和关闭应该由业务层控制。
		所有的数据层实现类保存在dao.impl子包下。
	
	5、数据层工厂类（DAO工厂类）：DAOFactory
		业务层要想进行数据层的调用，那么必须要取得IEmpDAO接口对象，但是不同层之间要想取得接口对象实例，
		需要使用工厂设计模式，这个工厂类将其保存在factory包下。
		使用工厂的特征就是外层不需要知道具体的子类。
		
	
二、对于业务层的开发：业务层是真正留给外部调用的，可能是控制层，或者是直接调用。既然业务层也是由不同的层进行调用，
	业务层开发的首要任务就是定义业务层的操作标准。
	
	1、开发业务层：IEmpService接口
		业务层也可以称为service层，既然描述的是emp表的操作，所以名称定义为IEmpService，并且保存在service包下，
		但是对于业务层的方法定义没有明确定义，建议写上有意义的统一名称。
	
	2、业务层实现类：EmpServiceImpl类
		业务层实现的核心功能
		负责控制数据库的打开与关闭，当存在了业务层对象后其目的就是为了操纵数据库；
		即：业务层对象实例化之后就必须准备好数据库连接。
		根据DAOFactory调用getIEmpDAOInstance()方法后取得IEmpDAO接口对象，
		业务层的实现类保存在service.impl子包中
		总结：不同层进行访问依靠的就是工厂类和接口进行操作
	
	3、业务层工厂类：ServiceFactory类
		业务层最终需要被其他的层所使用，所以需要为其定义共产类，该类同样保存在factory子包下，
		如果从开发的角度来讲，业务层应该分为两种：
			（1）前台业务逻辑：可以将其保存在service.front包中，工厂类：ServiceFrontFactory；
			（2）后台业务逻辑：可以将其保存在service.back包中，工厂类：ServiceBackFactory；
	总结：在实际的编写之中，子类永远都是不可见的，同时在整个操作中，控制层完全看不见数据库的任何操作（任何JDBC代码）		
	
有一点重要的地方要注意：几乎所有的数据表都会具有基础的crud功能（增加、修改全部、删除数据、根据id查询、数据统计），
	那么这些功能的方法每个接口都要重复定义，所以，为了避免代码重复，定义一个公共的接口（顶层接口IDAO），其余DAO子接口均继承此接口
	那么，为了解决重复问题，使用泛型实现接口的继承操作。

	在emp中有一个关系配置的知识点：emp表中应该有mgr和deptno ， 而Dept中应该有List<Emp>,这是为了说明emp和dept之间的关系